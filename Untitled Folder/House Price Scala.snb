{"metadata":{"id":"e3c3191f-f64d-484f-b6df-3f5e474e4b76","name":"House Price Scala","user_save_timestamp":"1970-01-01T01:00:00.000Z","auto_save_timestamp":"1970-01-01T01:00:00.000Z","language_info":{"name":"scala","file_extension":"scala","codemirror_mode":"text/x-scala"},"trusted":true,"sparkNotebook":null,"customLocalRepo":null,"customRepos":null,"customDeps":null,"customImports":null,"customArgs":null,"customSparkConf":null,"customVars":null},"cells":[{"metadata":{"id":"4187976F03AB4CA79C4226D134224197"},"cell_type":"markdown","source":"# Spark-Scala Data Science"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"472D84E40A7248FE9B6BE3ECEB426C46"},"cell_type":"code","source":"sc","outputs":[{"name":"stdout","output_type":"stream","text":"res192: org.apache.spark.SparkContext = org.apache.spark.SparkContext@e28eba0\n"},{"metadata":{},"data":{"text/html":"org.apache.spark.SparkContext@e28eba0"},"output_type":"execute_result","execution_count":76,"time":"Took: 1.478s, at 2019-04-07 08:20"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"F37DB698BF66437EBFF7846496A52F87"},"cell_type":"code","source":"sc\nsparkSession\n\n// Spark SQL\nimport org.apache.spark.sql.{SparkSession, Column}\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types.{StructField, IntegerType, StringType}\n\n// Spark ML\nimport org.apache.spark.ml.linalg.{Vectors, DenseVector}\nimport org.apache.spark.ml.feature.{StringIndexer, StandardScaler, VectorSlicer}\nimport org.apache.spark.ml.evaluation.RegressionEvaluator\nimport org.apache.spark.ml.regression.{LinearRegression, DecisionTreeRegressor}\nimport org.apache.spark.ml.Transformer\n\nimport spark.implicits._\n\n","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.sql.{SparkSession, Column}\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types.{StructField, IntegerType, StringType}\nimport org.apache.spark.ml.linalg.{Vectors, DenseVector}\nimport org.apache.spark.ml.feature.{StringIndexer, StandardScaler, VectorSlicer}\nimport org.apache.spark.ml.evaluation.RegressionEvaluator\nimport org.apache.spark.ml.regression.{LinearRegression, DecisionTreeRegressor}\nimport org.apache.spark.ml.Transformer\nimport spark.implicits._\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":77,"time":"Took: 2.835s, at 2019-04-07 08:20"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"6AAF126DDB8E45C2A155642197A67FCF"},"cell_type":"code","source":"println(\"Hello Spark\")\n\nval hello = \"Hello\"\nval world = \"World\"\n\nprintln(hello + \" \" + world)","outputs":[{"name":"stdout","output_type":"stream","text":"Hello Spark\nHello World\nhello: String = Hello\nworld: String = World\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":78,"time":"Took: 2.143s, at 2019-04-07 08:20"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true,"id":"9BF5F7F06916461F890DF1DE70449260"},"cell_type":"markdown","source":"## Resilient Distributed Dataset\n\n- A fault tolerant collection of elements that can be operated on in parallel\n- Trnasformations: Map, flatMap, Filters\n- Actions: Reduce, Count,..."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"442E0145BF2046A1A6D43DA26D436182"},"cell_type":"code","source":"import org.apache.spark.sql.SparkSession\n\nval spark = SparkSession\n  .builder()\n  .appName(\"Spark Example\")\n  .getOrCreate()","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.sql.SparkSession\nspark: org.apache.spark.sql.SparkSession = org.apache.spark.sql.SparkSession@183c72a5\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":79,"time":"Took: 1.495s, at 2019-04-07 08:21"}]},{"metadata":{"id":"592DE7D78801423A84844F7DF6DED477"},"cell_type":"markdown","source":"### Loading Data"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"C2F8E17F31404A68B64F361B66781832"},"cell_type":"code","source":"val df = spark.read.option(\"header\", true).option(\"inferschema\", true).csv(\"D:/Kaggle/House Price/train.csv\")","outputs":[{"name":"stdout","output_type":"stream","text":"df: org.apache.spark.sql.DataFrame = [Id: int, MSSubClass: int ... 79 more fields]\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":80,"time":"Took: 1.853s, at 2019-04-07 08:21"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"presentation":{"tabs_state":"{\n  \"tab_id\": \"#tab1510430891-0\"\n}","pivot_chart_state":"{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table Barchart\"\n}"},"id":"9B8C7391F03349EF9B5954ED1AAA59A4"},"cell_type":"code","source":"df.dtypes","outputs":[{"name":"stdout","output_type":"stream","text":"res199: Array[(String, String)] = Array((Id,IntegerType), (MSSubClass,IntegerType), (MSZoning,StringType), (LotFrontage,StringType), (LotArea,IntegerType), (Street,StringType), (Alley,StringType), (LotShape,StringType), (LandContour,StringType), (Utilities,StringType), (LotConfig,StringType), (LandSlope,StringType), (Neighborhood,StringType), (Condition1,StringType), (Condition2,StringType), (BldgType,StringType), (HouseStyle,StringType), (OverallQual,IntegerType), (OverallCond,IntegerType), (YearBuilt,IntegerType), (YearRemodAdd,IntegerType), (RoofStyle,StringType), (RoofMatl,StringType), (Exterior1st,StringType), (Exterior2nd,StringType), (MasVnrType,StringType), (MasVnrArea,StringType), (ExterQual,StringType), (ExterCond,StringType), (Foundation,StringType), (BsmtQual,StringType), (B..."},{"metadata":{},"data":{"text/html":"<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon8c25daa153a86dc3a0a6c0fb6c5fa7c3&quot;,&quot;dataInit&quot;:[],&quot;genId&quot;:&quot;1510430891&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tabs'], \n      function(playground, _magictabs) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictabs,\n    \"o\": {}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <div>\n        <ul class=\"nav nav-tabs\" id=\"ul1510430891\"><li>\n              <a href=\"#tab1510430891-0\"><i class=\"fa fa-table\"/></a>\n            </li><li>\n              <a href=\"#tab1510430891-1\"><i class=\"fa fa-pie-chart\"/></a>\n            </li><li>\n              <a href=\"#tab1510430891-2\"><i class=\"fa fa-cubes\"/></a>\n            </li></ul>\n\n        <div class=\"tab-content\" id=\"tab1510430891\"><div class=\"tab-pane\" id=\"tab1510430891-0\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anonaa74d3b5b26e5ac9d6a65b728f680cfc&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:&quot;Id&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;MSSubClass&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;MSZoning&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;LotFrontage&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;LotArea&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;Street&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Alley&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;LotShape&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;LandContour&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Utilities&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;LotConfig&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;LandSlope&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Neighborhood&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Condition1&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Condition2&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;BldgType&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;HouseStyle&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;OverallQual&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;OverallCond&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;YearBuilt&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;YearRemodAdd&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;RoofStyle&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;RoofMatl&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Exterior1st&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Exterior2nd&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;MasVnrType&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;MasVnrArea&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;ExterQual&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;ExterCond&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Foundation&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;BsmtQual&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;BsmtCond&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;BsmtExposure&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;BsmtFinType1&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;BsmtFinSF1&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;BsmtFinType2&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;BsmtFinSF2&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;BsmtUnfSF&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;TotalBsmtSF&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;Heating&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;HeatingQC&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;CentralAir&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Electrical&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;1stFlrSF&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;2ndFlrSF&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;LowQualFinSF&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;GrLivArea&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;BsmtFullBath&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;BsmtHalfBath&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;FullBath&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;HalfBath&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;BedroomAbvGr&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;KitchenAbvGr&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;KitchenQual&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;TotRmsAbvGrd&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;Functional&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Fireplaces&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;FireplaceQu&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;GarageType&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;GarageYrBlt&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;GarageFinish&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;GarageCars&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;GarageArea&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;GarageQual&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;GarageCond&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;PavedDrive&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;WoodDeckSF&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;OpenPorchSF&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;EnclosedPorch&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;3SsnPorch&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;ScreenPorch&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;PoolArea&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;PoolQC&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Fence&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;MiscFeature&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;MiscVal&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;MoSold&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;YrSold&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;SaleType&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;SaleCondition&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;SalePrice&quot;,&quot;_2&quot;:&quot;IntegerType&quot;}],&quot;genId&quot;:&quot;2087815575&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tableChart'], \n      function(playground, _magictableChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictableChart,\n    \"o\": {\"headers\":[\"_1\",\"_2\"],\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonb302f84dbcbd40b29788acd6a5c0c937&quot;,&quot;initialValue&quot;:&quot;81&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon0cf4d6a6528ef9aaa73f359daff67589&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div><div class=\"tab-pane\" id=\"tab1510430891-1\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anonb289e83bc88de7f1d0a45a2c9baa2207&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:&quot;Id&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;MSSubClass&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;MSZoning&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;LotFrontage&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;LotArea&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;Street&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Alley&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;LotShape&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;LandContour&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Utilities&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;LotConfig&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;LandSlope&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Neighborhood&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Condition1&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Condition2&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;BldgType&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;HouseStyle&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;OverallQual&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;OverallCond&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;YearBuilt&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;YearRemodAdd&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;RoofStyle&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;RoofMatl&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Exterior1st&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Exterior2nd&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;MasVnrType&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;MasVnrArea&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;ExterQual&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;ExterCond&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Foundation&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;BsmtQual&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;BsmtCond&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;BsmtExposure&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;BsmtFinType1&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;BsmtFinSF1&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;BsmtFinType2&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;BsmtFinSF2&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;BsmtUnfSF&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;TotalBsmtSF&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;Heating&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;HeatingQC&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;CentralAir&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Electrical&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;1stFlrSF&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;2ndFlrSF&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;LowQualFinSF&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;GrLivArea&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;BsmtFullBath&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;BsmtHalfBath&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;FullBath&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;HalfBath&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;BedroomAbvGr&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;KitchenAbvGr&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;KitchenQual&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;TotRmsAbvGrd&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;Functional&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Fireplaces&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;FireplaceQu&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;GarageType&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;GarageYrBlt&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;GarageFinish&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;GarageCars&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;GarageArea&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;GarageQual&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;GarageCond&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;PavedDrive&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;WoodDeckSF&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;OpenPorchSF&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;EnclosedPorch&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;3SsnPorch&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;ScreenPorch&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;PoolArea&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;PoolQC&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Fence&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;MiscFeature&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;MiscVal&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;MoSold&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;YrSold&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;SaleType&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;SaleCondition&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;SalePrice&quot;,&quot;_2&quot;:&quot;IntegerType&quot;}],&quot;genId&quot;:&quot;1190915615&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/pieChart'], \n      function(playground, _magicpieChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicpieChart,\n    \"o\": {\"series\":\"_1\",\"p\":\"_2\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon13bff62d9b3218cda7dd90349d2344d9&quot;,&quot;initialValue&quot;:&quot;81&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anona9fb78a57376e4dc767b064e37d8d656&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div><div class=\"tab-pane\" id=\"tab1510430891-2\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon8bd589454ad0015172d6d15b9d48175d&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:&quot;Id&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;MSSubClass&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;MSZoning&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;LotFrontage&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;LotArea&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;Street&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Alley&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;LotShape&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;LandContour&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Utilities&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;LotConfig&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;LandSlope&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Neighborhood&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Condition1&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Condition2&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;BldgType&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;HouseStyle&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;OverallQual&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;OverallCond&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;YearBuilt&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;YearRemodAdd&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;RoofStyle&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;RoofMatl&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Exterior1st&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Exterior2nd&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;MasVnrType&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;MasVnrArea&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;ExterQual&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;ExterCond&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Foundation&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;BsmtQual&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;BsmtCond&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;BsmtExposure&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;BsmtFinType1&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;BsmtFinSF1&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;BsmtFinType2&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;BsmtFinSF2&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;BsmtUnfSF&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;TotalBsmtSF&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;Heating&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;HeatingQC&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;CentralAir&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Electrical&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;1stFlrSF&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;2ndFlrSF&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;LowQualFinSF&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;GrLivArea&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;BsmtFullBath&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;BsmtHalfBath&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;FullBath&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;HalfBath&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;BedroomAbvGr&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;KitchenAbvGr&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;KitchenQual&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;TotRmsAbvGrd&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;Functional&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Fireplaces&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;FireplaceQu&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;GarageType&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;GarageYrBlt&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;GarageFinish&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;GarageCars&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;GarageArea&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;GarageQual&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;GarageCond&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;PavedDrive&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;WoodDeckSF&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;OpenPorchSF&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;EnclosedPorch&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;3SsnPorch&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;ScreenPorch&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;PoolArea&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;PoolQC&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;Fence&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;MiscFeature&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;MiscVal&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;MoSold&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;YrSold&quot;,&quot;_2&quot;:&quot;IntegerType&quot;},{&quot;_1&quot;:&quot;SaleType&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;SaleCondition&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;SalePrice&quot;,&quot;_2&quot;:&quot;IntegerType&quot;}],&quot;genId&quot;:&quot;1603796035&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/pivotChart'], \n      function(playground, _magicpivotChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicpivotChart,\n    \"o\": {\"width\":600,\"height\":400,\"derivedAttributes\":{},\"extraOptions\":{}}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anond5aa69642c1e6f2dbb3fe359e8d0c90a&quot;,&quot;initialValue&quot;:&quot;81&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon26456473503cd947491aed004626018f&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div></div>\n      </div>\n    </div></div>"},"output_type":"execute_result","execution_count":81,"time":"Took: 2.088s, at 2019-04-07 08:21"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"CC3B4E77B49D46549A67FCC46E41E7D0"},"cell_type":"code","source":"df","outputs":[{"name":"stdout","output_type":"stream","text":"res201: org.apache.spark.sql.DataFrame = [Id: int, MSSubClass: int ... 79 more fields]\n"},{"metadata":{},"data":{"text/html":"<div class=\"df-canvas\">\n      <script data-this=\"{&quot;dataId&quot;:&quot;anonb3490fa6da6e7aac437406b66baee7ba&quot;,&quot;partitionIndexId&quot;:&quot;anon3e8e79db2254080254c75535779c8c03&quot;,&quot;numPartitions&quot;:59,&quot;dfSchema&quot;:{&quot;type&quot;:&quot;struct&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;Id&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;MSSubClass&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;MSZoning&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;LotFrontage&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;LotArea&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;Street&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;Alley&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;LotShape&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;LandContour&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;Utilities&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;LotConfig&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;LandSlope&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;Neighborhood&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;Condition1&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;Condition2&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;BldgType&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;HouseStyle&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;OverallQual&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;OverallCond&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;YearBuilt&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;YearRemodAdd&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;RoofStyle&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;RoofMatl&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;Exterior1st&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;Exterior2nd&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;MasVnrType&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;MasVnrArea&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;ExterQual&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;ExterCond&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;Foundation&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;BsmtQual&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;BsmtCond&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;BsmtExposure&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;BsmtFinType1&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;BsmtFinSF1&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;BsmtFinType2&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;BsmtFinSF2&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;BsmtUnfSF&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;TotalBsmtSF&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;Heating&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;HeatingQC&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;CentralAir&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;Electrical&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;1stFlrSF&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;2ndFlrSF&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;LowQualFinSF&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;GrLivArea&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;BsmtFullBath&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;BsmtHalfBath&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;FullBath&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;HalfBath&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;BedroomAbvGr&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;KitchenAbvGr&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;KitchenQual&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;TotRmsAbvGrd&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;Functional&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;Fireplaces&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;FireplaceQu&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;GarageType&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;GarageYrBlt&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;GarageFinish&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;GarageCars&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;GarageArea&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;GarageQual&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;GarageCond&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;PavedDrive&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;WoodDeckSF&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;OpenPorchSF&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;EnclosedPorch&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;3SsnPorch&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;ScreenPorch&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;PoolArea&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;PoolQC&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;Fence&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;MiscFeature&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;MiscVal&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;MoSold&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;YrSold&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;SaleType&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;SaleCondition&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;SalePrice&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}}]}}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/dataframe','../javascripts/notebook/consoleDir'], \n      function(dataframe, extension) {\n        dataframe.call(data, this, extension);\n      }\n    );/*]]>*/</script>\n      <link rel=\"stylesheet\" href=\"/assets/stylesheets/ipython/css/dataframe.css\" type=\"text/css\"/>\n    </div>"},"output_type":"execute_result","execution_count":82,"time":"Took: 2.826s, at 2019-04-07 08:21"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"2AE6F16B2A6541E8AEBF6F94293C8502"},"cell_type":"code","source":"df.select(\"Id\",\"SalePrice\")","outputs":[{"name":"stdout","output_type":"stream","text":"res203: org.apache.spark.sql.DataFrame = [Id: int, SalePrice: int]\n"},{"metadata":{},"data":{"text/html":"<div class=\"df-canvas\">\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon88e8342e9623f2a91a6381429dcf79b3&quot;,&quot;partitionIndexId&quot;:&quot;anone54a55789bc3ff4ee6a32af103e6a560&quot;,&quot;numPartitions&quot;:59,&quot;dfSchema&quot;:{&quot;type&quot;:&quot;struct&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;Id&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;SalePrice&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}}]}}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/dataframe','../javascripts/notebook/consoleDir'], \n      function(dataframe, extension) {\n        dataframe.call(data, this, extension);\n      }\n    );/*]]>*/</script>\n      <link rel=\"stylesheet\" href=\"/assets/stylesheets/ipython/css/dataframe.css\" type=\"text/css\"/>\n    </div>"},"output_type":"execute_result","execution_count":83,"time":"Took: 2.901s, at 2019-04-07 08:21"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"CDAC5BA2CAC44A78954C97D8395DE229"},"cell_type":"code","source":"df.filter(df(\"SalePrice\") > 250000).select(\"Id\", \"SalePrice\")","outputs":[{"name":"stdout","output_type":"stream","text":"res205: org.apache.spark.sql.DataFrame = [Id: int, SalePrice: int]\n"},{"metadata":{},"data":{"text/html":"<div class=\"df-canvas\">\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon34a6fcbd4e3091655b3db78b17629c35&quot;,&quot;partitionIndexId&quot;:&quot;anon783eb11bc07dbacbe23804be8218681c&quot;,&quot;numPartitions&quot;:9,&quot;dfSchema&quot;:{&quot;type&quot;:&quot;struct&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;Id&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;SalePrice&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}}]}}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/dataframe','../javascripts/notebook/consoleDir'], \n      function(dataframe, extension) {\n        dataframe.call(data, this, extension);\n      }\n    );/*]]>*/</script>\n      <link rel=\"stylesheet\" href=\"/assets/stylesheets/ipython/css/dataframe.css\" type=\"text/css\"/>\n    </div>"},"output_type":"execute_result","execution_count":84,"time":"Took: 2.611s, at 2019-04-07 08:21"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true,"id":"C5E7871BA7A24F0493CE050AD1E96D93"},"cell_type":"markdown","source":"# Exploratory Data Analysis"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"5D8FD9A62E7442B185339A2F3DBEB2D6"},"cell_type":"code","source":"import org.apache.spark.sql.functions._\n\nval avgs = df.groupBy(\"YearBuilt\").agg(avg(\"SalePrice\"))\n\nLineChart(avgs.sort(\"YearBuilt\"))","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.sql.functions._\navgs: org.apache.spark.sql.DataFrame = [YearBuilt: int, avg(SalePrice): double]\nres207: notebook.front.widgets.charts.LineChart[org.apache.spark.sql.Dataset[org.apache.spark.sql.Row]] = <LineChart widget>\n"},{"metadata":{},"data":{"text/html":"<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon18527c6ecfae8d5197baab56e8f10408&quot;,&quot;dataInit&quot;:[{&quot;YearBuilt&quot;:1872,&quot;avg(SalePrice)&quot;:122000.0},{&quot;YearBuilt&quot;:1875,&quot;avg(SalePrice)&quot;:94000.0},{&quot;YearBuilt&quot;:1880,&quot;avg(SalePrice)&quot;:200619.75},{&quot;YearBuilt&quot;:1882,&quot;avg(SalePrice)&quot;:168000.0},{&quot;YearBuilt&quot;:1885,&quot;avg(SalePrice)&quot;:111250.0},{&quot;YearBuilt&quot;:1890,&quot;avg(SalePrice)&quot;:142200.0},{&quot;YearBuilt&quot;:1892,&quot;avg(SalePrice)&quot;:291250.0},{&quot;YearBuilt&quot;:1893,&quot;avg(SalePrice)&quot;:325000.0},{&quot;YearBuilt&quot;:1898,&quot;avg(SalePrice)&quot;:106000.0},{&quot;YearBuilt&quot;:1900,&quot;avg(SalePrice)&quot;:112492.6},{&quot;YearBuilt&quot;:1904,&quot;avg(SalePrice)&quot;:157500.0},{&quot;YearBuilt&quot;:1905,&quot;avg(SalePrice)&quot;:163000.0},{&quot;YearBuilt&quot;:1906,&quot;avg(SalePrice)&quot;:135000.0},{&quot;YearBuilt&quot;:1908,&quot;avg(SalePrice)&quot;:183500.0},{&quot;YearBuilt&quot;:1910,&quot;avg(SalePrice)&quot;:111959.05882352941},{&quot;YearBuilt&quot;:1911,&quot;avg(SalePrice)&quot;:130000.0},{&quot;YearBuilt&quot;:1912,&quot;avg(SalePrice)&quot;:119466.66666666667},{&quot;YearBuilt&quot;:1913,&quot;avg(SalePrice)&quot;:90350.0},{&quot;YearBuilt&quot;:1914,&quot;avg(SalePrice)&quot;:126055.28571428571},{&quot;YearBuilt&quot;:1915,&quot;avg(SalePrice)&quot;:134387.5},{&quot;YearBuilt&quot;:1916,&quot;avg(SalePrice)&quot;:139800.0},{&quot;YearBuilt&quot;:1917,&quot;avg(SalePrice)&quot;:129500.0},{&quot;YearBuilt&quot;:1918,&quot;avg(SalePrice)&quot;:172421.42857142858},{&quot;YearBuilt&quot;:1919,&quot;avg(SalePrice)&quot;:154833.33333333334},{&quot;YearBuilt&quot;:1920,&quot;avg(SalePrice)&quot;:112903.33333333333},{&quot;YearBuilt&quot;:1921,&quot;avg(SalePrice)&quot;:140813.33333333334},{&quot;YearBuilt&quot;:1922,&quot;avg(SalePrice)&quot;:109237.5},{&quot;YearBuilt&quot;:1923,&quot;avg(SalePrice)&quot;:159428.57142857142},{&quot;YearBuilt&quot;:1924,&quot;avg(SalePrice)&quot;:105985.71428571429},{&quot;YearBuilt&quot;:1925,&quot;avg(SalePrice)&quot;:129190.625},{&quot;YearBuilt&quot;:1926,&quot;avg(SalePrice)&quot;:124144.44444444444},{&quot;YearBuilt&quot;:1927,&quot;avg(SalePrice)&quot;:82666.66666666667},{&quot;YearBuilt&quot;:1928,&quot;avg(SalePrice)&quot;:135557.14285714287},{&quot;YearBuilt&quot;:1929,&quot;avg(SalePrice)&quot;:153000.0},{&quot;YearBuilt&quot;:1930,&quot;avg(SalePrice)&quot;:103588.88888888889},{&quot;YearBuilt&quot;:1931,&quot;avg(SalePrice)&quot;:126650.0},{&quot;YearBuilt&quot;:1932,&quot;avg(SalePrice)&quot;:233358.5},{&quot;YearBuilt&quot;:1934,&quot;avg(SalePrice)&quot;:220766.66666666666},{&quot;YearBuilt&quot;:1935,&quot;avg(SalePrice)&quot;:161083.33333333334},{&quot;YearBuilt&quot;:1936,&quot;avg(SalePrice)&quot;:137888.88888888888},{&quot;YearBuilt&quot;:1937,&quot;avg(SalePrice)&quot;:131974.2},{&quot;YearBuilt&quot;:1938,&quot;avg(SalePrice)&quot;:109137.5},{&quot;YearBuilt&quot;:1939,&quot;avg(SalePrice)&quot;:150825.0},{&quot;YearBuilt&quot;:1940,&quot;avg(SalePrice)&quot;:131994.44444444444},{&quot;YearBuilt&quot;:1941,&quot;avg(SalePrice)&quot;:120900.0},{&quot;YearBuilt&quot;:1942,&quot;avg(SalePrice)&quot;:162000.0},{&quot;YearBuilt&quot;:1945,&quot;avg(SalePrice)&quot;:133500.0},{&quot;YearBuilt&quot;:1946,&quot;avg(SalePrice)&quot;:122400.0},{&quot;YearBuilt&quot;:1947,&quot;avg(SalePrice)&quot;:117200.0},{&quot;YearBuilt&quot;:1948,&quot;avg(SalePrice)&quot;:137764.2857142857},{&quot;YearBuilt&quot;:1949,&quot;avg(SalePrice)&quot;:111517.58333333333},{&quot;YearBuilt&quot;:1950,&quot;avg(SalePrice)&quot;:128036.25},{&quot;YearBuilt&quot;:1951,&quot;avg(SalePrice)&quot;:136600.0},{&quot;YearBuilt&quot;:1952,&quot;avg(SalePrice)&quot;:110398.6},{&quot;YearBuilt&quot;:1953,&quot;avg(SalePrice)&quot;:146333.33333333334},{&quot;YearBuilt&quot;:1954,&quot;avg(SalePrice)&quot;:139650.0},{&quot;YearBuilt&quot;:1955,&quot;avg(SalePrice)&quot;:134517.1875},{&quot;YearBuilt&quot;:1956,&quot;avg(SalePrice)&quot;:135810.7142857143},{&quot;YearBuilt&quot;:1957,&quot;avg(SalePrice)&quot;:149959.1},{&quot;YearBuilt&quot;:1958,&quot;avg(SalePrice)&quot;:143179.16666666666},{&quot;YearBuilt&quot;:1959,&quot;avg(SalePrice)&quot;:154124.3076923077},{&quot;YearBuilt&quot;:1960,&quot;avg(SalePrice)&quot;:161550.0},{&quot;YearBuilt&quot;:1961,&quot;avg(SalePrice)&quot;:139846.42857142858},{&quot;YearBuilt&quot;:1962,&quot;avg(SalePrice)&quot;:145742.1052631579},{&quot;YearBuilt&quot;:1963,&quot;avg(SalePrice)&quot;:143403.125},{&quot;YearBuilt&quot;:1964,&quot;avg(SalePrice)&quot;:161893.33333333334},{&quot;YearBuilt&quot;:1965,&quot;avg(SalePrice)&quot;:153115.95833333334},{&quot;YearBuilt&quot;:1966,&quot;avg(SalePrice)&quot;:159559.44444444444},{&quot;YearBuilt&quot;:1967,&quot;avg(SalePrice)&quot;:142337.5},{&quot;YearBuilt&quot;:1968,&quot;avg(SalePrice)&quot;:166075.0},{&quot;YearBuilt&quot;:1969,&quot;avg(SalePrice)&quot;:160725.64285714287},{&quot;YearBuilt&quot;:1970,&quot;avg(SalePrice)&quot;:134647.91666666666},{&quot;YearBuilt&quot;:1971,&quot;avg(SalePrice)&quot;:131820.45454545456},{&quot;YearBuilt&quot;:1972,&quot;avg(SalePrice)&quot;:140569.5652173913},{&quot;YearBuilt&quot;:1973,&quot;avg(SalePrice)&quot;:139400.0},{&quot;YearBuilt&quot;:1974,&quot;avg(SalePrice)&quot;:183050.0},{&quot;YearBuilt&quot;:1975,&quot;avg(SalePrice)&quot;:159268.75},{&quot;YearBuilt&quot;:1976,&quot;avg(SalePrice)&quot;:163831.9696969697},{&quot;YearBuilt&quot;:1977,&quot;avg(SalePrice)&quot;:166860.9375},{&quot;YearBuilt&quot;:1978,&quot;avg(SalePrice)&quot;:160962.5},{&quot;YearBuilt&quot;:1979,&quot;avg(SalePrice)&quot;:156396.88888888888},{&quot;YearBuilt&quot;:1980,&quot;avg(SalePrice)&quot;:164800.0},{&quot;YearBuilt&quot;:1981,&quot;avg(SalePrice)&quot;:249880.0},{&quot;YearBuilt&quot;:1982,&quot;avg(SalePrice)&quot;:132400.0},{&quot;YearBuilt&quot;:1983,&quot;avg(SalePrice)&quot;:181400.0},{&quot;YearBuilt&quot;:1984,&quot;avg(SalePrice)&quot;:164111.11111111112},{&quot;YearBuilt&quot;:1985,&quot;avg(SalePrice)&quot;:191400.0},{&quot;YearBuilt&quot;:1986,&quot;avg(SalePrice)&quot;:212000.0},{&quot;YearBuilt&quot;:1987,&quot;avg(SalePrice)&quot;:198000.0},{&quot;YearBuilt&quot;:1988,&quot;avg(SalePrice)&quot;:204636.36363636365},{&quot;YearBuilt&quot;:1989,&quot;avg(SalePrice)&quot;:279500.0},{&quot;YearBuilt&quot;:1990,&quot;avg(SalePrice)&quot;:220881.66666666666},{&quot;YearBuilt&quot;:1991,&quot;avg(SalePrice)&quot;:186140.0},{&quot;YearBuilt&quot;:1992,&quot;avg(SalePrice)&quot;:218384.61538461538},{&quot;YearBuilt&quot;:1993,&quot;avg(SalePrice)&quot;:218058.82352941178},{&quot;YearBuilt&quot;:1994,&quot;avg(SalePrice)&quot;:247900.0},{&quot;YearBuilt&quot;:1995,&quot;avg(SalePrice)&quot;:262194.44444444444},{&quot;YearBuilt&quot;:1996,&quot;avg(SalePrice)&quot;:259162.66666666666},{&quot;YearBuilt&quot;:1997,&quot;avg(SalePrice)&quot;:214925.0},{&quot;YearBuilt&quot;:1998,&quot;avg(SalePrice)&quot;:220450.0},{&quot;YearBuilt&quot;:1999,&quot;avg(SalePrice)&quot;:210614.72},{&quot;YearBuilt&quot;:2000,&quot;avg(SalePrice)&quot;:210766.66666666666},{&quot;YearBuilt&quot;:2001,&quot;avg(SalePrice)&quot;:242630.0},{&quot;YearBuilt&quot;:2002,&quot;avg(SalePrice)&quot;:226869.5652173913},{&quot;YearBuilt&quot;:2003,&quot;avg(SalePrice)&quot;:227408.57777777777},{&quot;YearBuilt&quot;:2004,&quot;avg(SalePrice)&quot;:210347.72222222222},{&quot;YearBuilt&quot;:2005,&quot;avg(SalePrice)&quot;:229680.953125},{&quot;YearBuilt&quot;:2006,&quot;avg(SalePrice)&quot;:251775.44776119402},{&quot;YearBuilt&quot;:2007,&quot;avg(SalePrice)&quot;:255362.73469387754},{&quot;YearBuilt&quot;:2008,&quot;avg(SalePrice)&quot;:348849.1304347826},{&quot;YearBuilt&quot;:2009,&quot;avg(SalePrice)&quot;:269220.0},{&quot;YearBuilt&quot;:2010,&quot;avg(SalePrice)&quot;:394432.0}],&quot;genId&quot;:&quot;76970772&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/lineChart'], \n      function(playground, _magiclineChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magiclineChart,\n    \"o\": {\"x\":\"YearBuilt\",\"y\":\"avg(SalePrice)\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anoncdcdd98438618bf29ebdd9d944779fe0&quot;,&quot;initialValue&quot;:&quot;112&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon389d8f2c8b8a9a332dddd6b16d8afdd6&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>"},"output_type":"execute_result","execution_count":85,"time":"Took: 4.642s, at 2019-04-07 08:21"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"72D021279F8B4DC0BA98B2398DB3BAE8"},"cell_type":"code","source":"val richestNeighborhood = df.groupBy(\"Neighborhood\").agg(sum(\"SalePrice\"))\nPieChart(richestNeighborhood)","outputs":[{"name":"stdout","output_type":"stream","text":"richestNeighborhood: org.apache.spark.sql.DataFrame = [Neighborhood: string, sum(SalePrice): bigint]\nres209: notebook.front.widgets.charts.PieChart[org.apache.spark.sql.DataFrame] = <PieChart widget>\n"},{"metadata":{},"data":{"text/html":"<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anonf0ecc7073686944146e20501aa6eefa8&quot;,&quot;dataInit&quot;:[{&quot;Neighborhood&quot;:&quot;Veenker&quot;,&quot;sum(SalePrice)&quot;:2626500},{&quot;Neighborhood&quot;:&quot;BrkSide&quot;,&quot;sum(SalePrice)&quot;:7240375},{&quot;Neighborhood&quot;:&quot;NPkVill&quot;,&quot;sum(SalePrice)&quot;:1284250},{&quot;Neighborhood&quot;:&quot;NridgHt&quot;,&quot;sum(SalePrice)&quot;:24352838},{&quot;Neighborhood&quot;:&quot;NoRidge&quot;,&quot;sum(SalePrice)&quot;:13747108},{&quot;Neighborhood&quot;:&quot;NWAmes&quot;,&quot;sum(SalePrice)&quot;:13800655},{&quot;Neighborhood&quot;:&quot;OldTown&quot;,&quot;sum(SalePrice)&quot;:14489459},{&quot;Neighborhood&quot;:&quot;Gilbert&quot;,&quot;sum(SalePrice)&quot;:15235506},{&quot;Neighborhood&quot;:&quot;Somerst&quot;,&quot;sum(SalePrice)&quot;:19382666},{&quot;Neighborhood&quot;:&quot;Crawfor&quot;,&quot;sum(SalePrice)&quot;:10741861},{&quot;Neighborhood&quot;:&quot;NAmes&quot;,&quot;sum(SalePrice)&quot;:32815593},{&quot;Neighborhood&quot;:&quot;IDOTRR&quot;,&quot;sum(SalePrice)&quot;:3704580},{&quot;Neighborhood&quot;:&quot;Edwards&quot;,&quot;sum(SalePrice)&quot;:12821970},{&quot;Neighborhood&quot;:&quot;Sawyer&quot;,&quot;sum(SalePrice)&quot;:10122692},{&quot;Neighborhood&quot;:&quot;StoneBr&quot;,&quot;sum(SalePrice)&quot;:7762475},{&quot;Neighborhood&quot;:&quot;CollgCr&quot;,&quot;sum(SalePrice)&quot;:29694866},{&quot;Neighborhood&quot;:&quot;SWISU&quot;,&quot;sum(SalePrice)&quot;:3564784},{&quot;Neighborhood&quot;:&quot;MeadowV&quot;,&quot;sum(SalePrice)&quot;:1675800},{&quot;Neighborhood&quot;:&quot;Timber&quot;,&quot;sum(SalePrice)&quot;:9205403},{&quot;Neighborhood&quot;:&quot;Blmngtn&quot;,&quot;sum(SalePrice)&quot;:3312805},{&quot;Neighborhood&quot;:&quot;Mitchel&quot;,&quot;sum(SalePrice)&quot;:7657236},{&quot;Neighborhood&quot;:&quot;SawyerW&quot;,&quot;sum(SalePrice)&quot;:11006792},{&quot;Neighborhood&quot;:&quot;Blueste&quot;,&quot;sum(SalePrice)&quot;:275000},{&quot;Neighborhood&quot;:&quot;BrDale&quot;,&quot;sum(SalePrice)&quot;:1671900},{&quot;Neighborhood&quot;:&quot;ClearCr&quot;,&quot;sum(SalePrice)&quot;:5951832}],&quot;genId&quot;:&quot;1502848481&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/pieChart'], \n      function(playground, _magicpieChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicpieChart,\n    \"o\": {\"series\":\"Neighborhood\",\"p\":\"sum(SalePrice)\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonf6938e0dfdb3c5ce49f1c1e680b7d2c5&quot;,&quot;initialValue&quot;:&quot;25&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon3d6bb818e8e304afb2a30158c90ae485&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>"},"output_type":"execute_result","execution_count":86,"time":"Took: 2.697s, at 2019-04-07 08:21"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"55B674069B96406588757426020007C7"},"cell_type":"code","source":"val radarData = df.select(\"Id\", \"BsmtFullBath\", \"BsmtHalfBath\", \"FullBath\", \"HalfBath\")\nRadarChart(radarData.take(2), labelField = Some(\"Id\"))","outputs":[{"name":"stdout","output_type":"stream","text":"radarData: org.apache.spark.sql.DataFrame = [Id: int, BsmtFullBath: int ... 3 more fields]\nres211: notebook.front.widgets.charts.RadarChart[Array[org.apache.spark.sql.Row]] = <RadarChart widget>\n"},{"metadata":{},"data":{"text/html":"<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon233d6786212737bb573004f4826370ac&quot;,&quot;dataInit&quot;:[{&quot;Id&quot;:1,&quot;FullBath&quot;:2,&quot;HalfBath&quot;:1,&quot;BsmtHalfBath&quot;:0,&quot;BsmtFullBath&quot;:1},{&quot;Id&quot;:2,&quot;FullBath&quot;:2,&quot;HalfBath&quot;:0,&quot;BsmtHalfBath&quot;:1,&quot;BsmtFullBath&quot;:0}],&quot;genId&quot;:&quot;1181364204&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/radarChart'], \n      function(playground, _magicradarChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicradarChart,\n    \"o\": {\"classCol\":\"Id\",\"axisCols\":[\"BsmtFullBath\",\"BsmtHalfBath\",\"FullBath\",\"HalfBath\"],\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon00687f39d4c9690601cdfeec01161a9e&quot;,&quot;initialValue&quot;:&quot;2&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon71075df9c71d5926dcfca253581835a0&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>"},"output_type":"execute_result","execution_count":87,"time":"Took: 2.359s, at 2019-04-07 08:21"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"7E43A20E5AF5493D961480FE3B2D92A7"},"cell_type":"code","source":"df.select($\"Id\", $\"SalePrice\" as \"Sale Price in Dollars\", $\"SalePrice\" * 0.9 as \"Sale Price in Euros\")","outputs":[{"name":"stdout","output_type":"stream","text":"res213: org.apache.spark.sql.DataFrame = [Id: int, Sale Price in Dollars: int ... 1 more field]\n"},{"metadata":{},"data":{"text/html":"<div class=\"df-canvas\">\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon47001409caaacd8afb8f9dd2c77a0a96&quot;,&quot;partitionIndexId&quot;:&quot;anon214357c10cc1030fe08504328595da50&quot;,&quot;numPartitions&quot;:59,&quot;dfSchema&quot;:{&quot;type&quot;:&quot;struct&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;Id&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;Sale Price in Dollars&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;Sale Price in Euros&quot;,&quot;type&quot;:&quot;double&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}}]}}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/dataframe','../javascripts/notebook/consoleDir'], \n      function(dataframe, extension) {\n        dataframe.call(data, this, extension);\n      }\n    );/*]]>*/</script>\n      <link rel=\"stylesheet\" href=\"/assets/stylesheets/ipython/css/dataframe.css\" type=\"text/css\"/>\n    </div>"},"output_type":"execute_result","execution_count":88,"time":"Took: 2.486s, at 2019-04-07 08:21"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"8F749024E269466ABC381B880AE4CB29"},"cell_type":"code","source":"df.withColumn(\"Random\", rand(42) > 0.5).filter(\"Random\").select(\"Id\", \"SalePrice\")","outputs":[{"name":"stdout","output_type":"stream","text":"res215: org.apache.spark.sql.DataFrame = [Id: int, SalePrice: int]\n"},{"metadata":{},"data":{"text/html":"<div class=\"df-canvas\">\n      <script data-this=\"{&quot;dataId&quot;:&quot;anonfc9729b1da8af86e2cb67347e81264a1&quot;,&quot;partitionIndexId&quot;:&quot;anon6ad6da9e875df14d9b9455baf7bb78ee&quot;,&quot;numPartitions&quot;:31,&quot;dfSchema&quot;:{&quot;type&quot;:&quot;struct&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;Id&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;SalePrice&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}}]}}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/dataframe','../javascripts/notebook/consoleDir'], \n      function(dataframe, extension) {\n        dataframe.call(data, this, extension);\n      }\n    );/*]]>*/</script>\n      <link rel=\"stylesheet\" href=\"/assets/stylesheets/ipython/css/dataframe.css\" type=\"text/css\"/>\n    </div>"},"output_type":"execute_result","execution_count":89,"time":"Took: 2.458s, at 2019-04-07 08:21"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"6BE50980887B4FED81B2160C799EA357"},"cell_type":"code","source":"df.select(\n  variance(\"SalePrice\") as \"Variance\"\n, mean(\"SalePrice\") as \"Mean\"\n, stddev(\"SalePrice\") as \"Standard Deviaton\")\n","outputs":[{"name":"stdout","output_type":"stream","text":"res217: org.apache.spark.sql.DataFrame = [Variance: double, Mean: double ... 1 more field]\n"},{"metadata":{},"data":{"text/html":"<div class=\"df-canvas\">\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon0bd88c3a4d91ac3f3e14cda3ee2d2b80&quot;,&quot;partitionIndexId&quot;:&quot;anonfbde672989b6187dec035fcf2f04ad67&quot;,&quot;numPartitions&quot;:1,&quot;dfSchema&quot;:{&quot;type&quot;:&quot;struct&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;Variance&quot;,&quot;type&quot;:&quot;double&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;Mean&quot;,&quot;type&quot;:&quot;double&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;Standard Deviaton&quot;,&quot;type&quot;:&quot;double&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}}]}}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/dataframe','../javascripts/notebook/consoleDir'], \n      function(dataframe, extension) {\n        dataframe.call(data, this, extension);\n      }\n    );/*]]>*/</script>\n      <link rel=\"stylesheet\" href=\"/assets/stylesheets/ipython/css/dataframe.css\" type=\"text/css\"/>\n    </div>"},"output_type":"execute_result","execution_count":90,"time":"Took: 2.814s, at 2019-04-07 08:21"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"F0DAD66614F64E188F347589550187B8"},"cell_type":"code","source":"df.describe(\"SalePrice\", \"LotArea\")","outputs":[{"name":"stdout","output_type":"stream","text":"res219: org.apache.spark.sql.DataFrame = [summary: string, SalePrice: string ... 1 more field]\n"},{"metadata":{},"data":{"text/html":"<div class=\"df-canvas\">\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon56c7bee1dad4c956427f2b0e4907fbef&quot;,&quot;partitionIndexId&quot;:&quot;anonc5b4fb8691af2abaed88577bf4108c13&quot;,&quot;numPartitions&quot;:1,&quot;dfSchema&quot;:{&quot;type&quot;:&quot;struct&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;summary&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;SalePrice&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;LotArea&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}}]}}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/dataframe','../javascripts/notebook/consoleDir'], \n      function(dataframe, extension) {\n        dataframe.call(data, this, extension);\n      }\n    );/*]]>*/</script>\n      <link rel=\"stylesheet\" href=\"/assets/stylesheets/ipython/css/dataframe.css\" type=\"text/css\"/>\n    </div>"},"output_type":"execute_result","execution_count":91,"time":"Took: 2.747s, at 2019-04-07 08:21"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"5490490C1E59490D83935C7CAC6B513F"},"cell_type":"code","source":"df.select(corr(\"OverallQual\", \"SalePrice\"))","outputs":[{"name":"stdout","output_type":"stream","text":"res221: org.apache.spark.sql.DataFrame = [corr(OverallQual, SalePrice): double]\n"},{"metadata":{},"data":{"text/html":"<div class=\"df-canvas\">\n      <script data-this=\"{&quot;dataId&quot;:&quot;anonb48e6e476e89c63eee0f328ea41b4a9b&quot;,&quot;partitionIndexId&quot;:&quot;anonc91428b3a5dcb3d75082735fcba237c7&quot;,&quot;numPartitions&quot;:1,&quot;dfSchema&quot;:{&quot;type&quot;:&quot;struct&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;corr(OverallQual, SalePrice)&quot;,&quot;type&quot;:&quot;double&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}}]}}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/dataframe','../javascripts/notebook/consoleDir'], \n      function(dataframe, extension) {\n        dataframe.call(data, this, extension);\n      }\n    );/*]]>*/</script>\n      <link rel=\"stylesheet\" href=\"/assets/stylesheets/ipython/css/dataframe.css\" type=\"text/css\"/>\n    </div>"},"output_type":"execute_result","execution_count":92,"time":"Took: 2.759s, at 2019-04-07 08:21"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"presentation":{"tabs_state":"{\n  \"tab_id\": \"#tab302899659-0\"\n}","pivot_chart_state":"{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"},"id":"377F88E8AE684F5DAC4E400FA872DDB2"},"cell_type":"code","source":"import org.apache.spark.sql.types.{StructField, IntegerType}\n\nval fields = df.schema.fields.collect {case StructField(name, IntegerType, _, _) => name }\nval correlations = df.select(fields.map(corr(_, \"SalePrice\")): _*).first.toSeq\n\nfields zip correlations","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.sql.types.{StructField, IntegerType}\nfields: Array[String] = Array(Id, MSSubClass, LotArea, OverallQual, OverallCond, YearBuilt, YearRemodAdd, BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, 1stFlrSF, 2ndFlrSF, LowQualFinSF, GrLivArea, BsmtFullBath, BsmtHalfBath, FullBath, HalfBath, BedroomAbvGr, KitchenAbvGr, TotRmsAbvGrd, Fireplaces, GarageCars, GarageArea, WoodDeckSF, OpenPorchSF, EnclosedPorch, 3SsnPorch, ScreenPorch, PoolArea, MiscVal, MoSold, YrSold, SalePrice)\ncorrelations: Seq[Any] = WrappedArray(-0.021916719443430967, -0.08428413512659509, 0.2638433538714051, 0.7909816005838053, -0.07785589404867797, 0.5228973328794967, 0.5071009671113866, 0.38641980624215344, -0.01137812145021515, 0.21447910554696928, 0.6135805515591943, 0.6058521846919153, 0.3193338028..."},{"metadata":{},"data":{"text/html":"<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anonfa92b8c4214b55307599485e71788229&quot;,&quot;dataInit&quot;:[],&quot;genId&quot;:&quot;302899659&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tabs'], \n      function(playground, _magictabs) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictabs,\n    \"o\": {}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <div>\n        <ul class=\"nav nav-tabs\" id=\"ul302899659\"><li>\n              <a href=\"#tab302899659-0\"><i class=\"fa fa-table\"/></a>\n            </li><li>\n              <a href=\"#tab302899659-1\"><i class=\"fa fa-bar-chart\"/></a>\n            </li><li>\n              <a href=\"#tab302899659-2\"><i class=\"fa fa-pie-chart\"/></a>\n            </li><li>\n              <a href=\"#tab302899659-3\"><i class=\"fa fa-cubes\"/></a>\n            </li></ul>\n\n        <div class=\"tab-content\" id=\"tab302899659\"><div class=\"tab-pane\" id=\"tab302899659-0\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon993f2cd7a0f28041a1bfd2e7c940e33b&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:&quot;Id&quot;,&quot;_2&quot;:-0.021916719443430967},{&quot;_1&quot;:&quot;MSSubClass&quot;,&quot;_2&quot;:-0.08428413512659509},{&quot;_1&quot;:&quot;LotArea&quot;,&quot;_2&quot;:0.2638433538714051},{&quot;_1&quot;:&quot;OverallQual&quot;,&quot;_2&quot;:0.7909816005838053},{&quot;_1&quot;:&quot;OverallCond&quot;,&quot;_2&quot;:-0.07785589404867797},{&quot;_1&quot;:&quot;YearBuilt&quot;,&quot;_2&quot;:0.5228973328794967},{&quot;_1&quot;:&quot;YearRemodAdd&quot;,&quot;_2&quot;:0.5071009671113866},{&quot;_1&quot;:&quot;BsmtFinSF1&quot;,&quot;_2&quot;:0.38641980624215344},{&quot;_1&quot;:&quot;BsmtFinSF2&quot;,&quot;_2&quot;:-0.01137812145021515},{&quot;_1&quot;:&quot;BsmtUnfSF&quot;,&quot;_2&quot;:0.21447910554696928},{&quot;_1&quot;:&quot;TotalBsmtSF&quot;,&quot;_2&quot;:0.6135805515591943},{&quot;_1&quot;:&quot;1stFlrSF&quot;,&quot;_2&quot;:0.6058521846919153},{&quot;_1&quot;:&quot;2ndFlrSF&quot;,&quot;_2&quot;:0.31933380283206736},{&quot;_1&quot;:&quot;LowQualFinSF&quot;,&quot;_2&quot;:-0.02560613000067955},{&quot;_1&quot;:&quot;GrLivArea&quot;,&quot;_2&quot;:0.7086244776126515},{&quot;_1&quot;:&quot;BsmtFullBath&quot;,&quot;_2&quot;:0.22712223313149427},{&quot;_1&quot;:&quot;BsmtHalfBath&quot;,&quot;_2&quot;:-0.016844154297358943},{&quot;_1&quot;:&quot;FullBath&quot;,&quot;_2&quot;:0.5606637627484453},{&quot;_1&quot;:&quot;HalfBath&quot;,&quot;_2&quot;:0.28410767559478256},{&quot;_1&quot;:&quot;BedroomAbvGr&quot;,&quot;_2&quot;:0.16821315430073963},{&quot;_1&quot;:&quot;KitchenAbvGr&quot;,&quot;_2&quot;:-0.13590737084214105},{&quot;_1&quot;:&quot;TotRmsAbvGrd&quot;,&quot;_2&quot;:0.5337231555820284},{&quot;_1&quot;:&quot;Fireplaces&quot;,&quot;_2&quot;:0.46692883675152763},{&quot;_1&quot;:&quot;GarageCars&quot;,&quot;_2&quot;:0.6404091972583519},{&quot;_1&quot;:&quot;GarageArea&quot;,&quot;_2&quot;:0.6234314389183622},{&quot;_1&quot;:&quot;WoodDeckSF&quot;,&quot;_2&quot;:0.32441344456812926},{&quot;_1&quot;:&quot;OpenPorchSF&quot;,&quot;_2&quot;:0.31585622711605504},{&quot;_1&quot;:&quot;EnclosedPorch&quot;,&quot;_2&quot;:-0.1285779579259566},{&quot;_1&quot;:&quot;3SsnPorch&quot;,&quot;_2&quot;:0.04458366533574838},{&quot;_1&quot;:&quot;ScreenPorch&quot;,&quot;_2&quot;:0.11144657114291112},{&quot;_1&quot;:&quot;PoolArea&quot;,&quot;_2&quot;:0.09240354949187318},{&quot;_1&quot;:&quot;MiscVal&quot;,&quot;_2&quot;:-0.021189579640303213},{&quot;_1&quot;:&quot;MoSold&quot;,&quot;_2&quot;:0.046432245223819446},{&quot;_1&quot;:&quot;YrSold&quot;,&quot;_2&quot;:-0.028922585168736813},{&quot;_1&quot;:&quot;SalePrice&quot;,&quot;_2&quot;:1.0}],&quot;genId&quot;:&quot;2093228536&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tableChart'], \n      function(playground, _magictableChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictableChart,\n    \"o\": {\"headers\":[\"_1\",\"_2\"],\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon909927a112c61bed06505fd202b46ef5&quot;,&quot;initialValue&quot;:&quot;35&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon6349c598bb1c0da67579fa6dc61dee82&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div><div class=\"tab-pane\" id=\"tab302899659-1\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon0c6de5b9df4a48866e7daedaa49bb04d&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:&quot;Id&quot;,&quot;_2&quot;:-0.021916719443430967},{&quot;_1&quot;:&quot;MSSubClass&quot;,&quot;_2&quot;:-0.08428413512659509},{&quot;_1&quot;:&quot;LotArea&quot;,&quot;_2&quot;:0.2638433538714051},{&quot;_1&quot;:&quot;OverallQual&quot;,&quot;_2&quot;:0.7909816005838053},{&quot;_1&quot;:&quot;OverallCond&quot;,&quot;_2&quot;:-0.07785589404867797},{&quot;_1&quot;:&quot;YearBuilt&quot;,&quot;_2&quot;:0.5228973328794967},{&quot;_1&quot;:&quot;YearRemodAdd&quot;,&quot;_2&quot;:0.5071009671113866},{&quot;_1&quot;:&quot;BsmtFinSF1&quot;,&quot;_2&quot;:0.38641980624215344},{&quot;_1&quot;:&quot;BsmtFinSF2&quot;,&quot;_2&quot;:-0.01137812145021515},{&quot;_1&quot;:&quot;BsmtUnfSF&quot;,&quot;_2&quot;:0.21447910554696928},{&quot;_1&quot;:&quot;TotalBsmtSF&quot;,&quot;_2&quot;:0.6135805515591943},{&quot;_1&quot;:&quot;1stFlrSF&quot;,&quot;_2&quot;:0.6058521846919153},{&quot;_1&quot;:&quot;2ndFlrSF&quot;,&quot;_2&quot;:0.31933380283206736},{&quot;_1&quot;:&quot;LowQualFinSF&quot;,&quot;_2&quot;:-0.02560613000067955},{&quot;_1&quot;:&quot;GrLivArea&quot;,&quot;_2&quot;:0.7086244776126515},{&quot;_1&quot;:&quot;BsmtFullBath&quot;,&quot;_2&quot;:0.22712223313149427},{&quot;_1&quot;:&quot;BsmtHalfBath&quot;,&quot;_2&quot;:-0.016844154297358943},{&quot;_1&quot;:&quot;FullBath&quot;,&quot;_2&quot;:0.5606637627484453},{&quot;_1&quot;:&quot;HalfBath&quot;,&quot;_2&quot;:0.28410767559478256},{&quot;_1&quot;:&quot;BedroomAbvGr&quot;,&quot;_2&quot;:0.16821315430073963},{&quot;_1&quot;:&quot;KitchenAbvGr&quot;,&quot;_2&quot;:-0.13590737084214105},{&quot;_1&quot;:&quot;TotRmsAbvGrd&quot;,&quot;_2&quot;:0.5337231555820284},{&quot;_1&quot;:&quot;Fireplaces&quot;,&quot;_2&quot;:0.46692883675152763},{&quot;_1&quot;:&quot;GarageCars&quot;,&quot;_2&quot;:0.6404091972583519},{&quot;_1&quot;:&quot;GarageArea&quot;,&quot;_2&quot;:0.6234314389183622},{&quot;_1&quot;:&quot;WoodDeckSF&quot;,&quot;_2&quot;:0.32441344456812926},{&quot;_1&quot;:&quot;OpenPorchSF&quot;,&quot;_2&quot;:0.31585622711605504},{&quot;_1&quot;:&quot;EnclosedPorch&quot;,&quot;_2&quot;:-0.1285779579259566},{&quot;_1&quot;:&quot;3SsnPorch&quot;,&quot;_2&quot;:0.04458366533574838},{&quot;_1&quot;:&quot;ScreenPorch&quot;,&quot;_2&quot;:0.11144657114291112},{&quot;_1&quot;:&quot;PoolArea&quot;,&quot;_2&quot;:0.09240354949187318},{&quot;_1&quot;:&quot;MiscVal&quot;,&quot;_2&quot;:-0.021189579640303213},{&quot;_1&quot;:&quot;MoSold&quot;,&quot;_2&quot;:0.046432245223819446},{&quot;_1&quot;:&quot;YrSold&quot;,&quot;_2&quot;:-0.028922585168736813},{&quot;_1&quot;:&quot;SalePrice&quot;,&quot;_2&quot;:1.0}],&quot;genId&quot;:&quot;1868585666&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/barChart'], \n      function(playground, _magicbarChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicbarChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon1c94fda7f2ef4a2baa538fa6f4cb7047&quot;,&quot;initialValue&quot;:&quot;35&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonff12f4cae148e3235d38ecaabe37c7ba&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div><div class=\"tab-pane\" id=\"tab302899659-2\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon55c24c27b548fc6edb58c244d44ebe2f&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:&quot;Id&quot;,&quot;_2&quot;:-0.021916719443430967},{&quot;_1&quot;:&quot;MSSubClass&quot;,&quot;_2&quot;:-0.08428413512659509},{&quot;_1&quot;:&quot;LotArea&quot;,&quot;_2&quot;:0.2638433538714051},{&quot;_1&quot;:&quot;OverallQual&quot;,&quot;_2&quot;:0.7909816005838053},{&quot;_1&quot;:&quot;OverallCond&quot;,&quot;_2&quot;:-0.07785589404867797},{&quot;_1&quot;:&quot;YearBuilt&quot;,&quot;_2&quot;:0.5228973328794967},{&quot;_1&quot;:&quot;YearRemodAdd&quot;,&quot;_2&quot;:0.5071009671113866},{&quot;_1&quot;:&quot;BsmtFinSF1&quot;,&quot;_2&quot;:0.38641980624215344},{&quot;_1&quot;:&quot;BsmtFinSF2&quot;,&quot;_2&quot;:-0.01137812145021515},{&quot;_1&quot;:&quot;BsmtUnfSF&quot;,&quot;_2&quot;:0.21447910554696928},{&quot;_1&quot;:&quot;TotalBsmtSF&quot;,&quot;_2&quot;:0.6135805515591943},{&quot;_1&quot;:&quot;1stFlrSF&quot;,&quot;_2&quot;:0.6058521846919153},{&quot;_1&quot;:&quot;2ndFlrSF&quot;,&quot;_2&quot;:0.31933380283206736},{&quot;_1&quot;:&quot;LowQualFinSF&quot;,&quot;_2&quot;:-0.02560613000067955},{&quot;_1&quot;:&quot;GrLivArea&quot;,&quot;_2&quot;:0.7086244776126515},{&quot;_1&quot;:&quot;BsmtFullBath&quot;,&quot;_2&quot;:0.22712223313149427},{&quot;_1&quot;:&quot;BsmtHalfBath&quot;,&quot;_2&quot;:-0.016844154297358943},{&quot;_1&quot;:&quot;FullBath&quot;,&quot;_2&quot;:0.5606637627484453},{&quot;_1&quot;:&quot;HalfBath&quot;,&quot;_2&quot;:0.28410767559478256},{&quot;_1&quot;:&quot;BedroomAbvGr&quot;,&quot;_2&quot;:0.16821315430073963},{&quot;_1&quot;:&quot;KitchenAbvGr&quot;,&quot;_2&quot;:-0.13590737084214105},{&quot;_1&quot;:&quot;TotRmsAbvGrd&quot;,&quot;_2&quot;:0.5337231555820284},{&quot;_1&quot;:&quot;Fireplaces&quot;,&quot;_2&quot;:0.46692883675152763},{&quot;_1&quot;:&quot;GarageCars&quot;,&quot;_2&quot;:0.6404091972583519},{&quot;_1&quot;:&quot;GarageArea&quot;,&quot;_2&quot;:0.6234314389183622},{&quot;_1&quot;:&quot;WoodDeckSF&quot;,&quot;_2&quot;:0.32441344456812926},{&quot;_1&quot;:&quot;OpenPorchSF&quot;,&quot;_2&quot;:0.31585622711605504},{&quot;_1&quot;:&quot;EnclosedPorch&quot;,&quot;_2&quot;:-0.1285779579259566},{&quot;_1&quot;:&quot;3SsnPorch&quot;,&quot;_2&quot;:0.04458366533574838},{&quot;_1&quot;:&quot;ScreenPorch&quot;,&quot;_2&quot;:0.11144657114291112},{&quot;_1&quot;:&quot;PoolArea&quot;,&quot;_2&quot;:0.09240354949187318},{&quot;_1&quot;:&quot;MiscVal&quot;,&quot;_2&quot;:-0.021189579640303213},{&quot;_1&quot;:&quot;MoSold&quot;,&quot;_2&quot;:0.046432245223819446},{&quot;_1&quot;:&quot;YrSold&quot;,&quot;_2&quot;:-0.028922585168736813},{&quot;_1&quot;:&quot;SalePrice&quot;,&quot;_2&quot;:1.0}],&quot;genId&quot;:&quot;1339358029&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/pieChart'], \n      function(playground, _magicpieChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicpieChart,\n    \"o\": {\"series\":\"_1\",\"p\":\"_2\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonbb45049445152ad4e07c8df499496950&quot;,&quot;initialValue&quot;:&quot;35&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon951db4246373e7a033315c34475cd157&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div><div class=\"tab-pane\" id=\"tab302899659-3\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anonc602b5cc2ee5d51f856c5939a3effd1f&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:&quot;Id&quot;,&quot;_2&quot;:-0.021916719443430967},{&quot;_1&quot;:&quot;MSSubClass&quot;,&quot;_2&quot;:-0.08428413512659509},{&quot;_1&quot;:&quot;LotArea&quot;,&quot;_2&quot;:0.2638433538714051},{&quot;_1&quot;:&quot;OverallQual&quot;,&quot;_2&quot;:0.7909816005838053},{&quot;_1&quot;:&quot;OverallCond&quot;,&quot;_2&quot;:-0.07785589404867797},{&quot;_1&quot;:&quot;YearBuilt&quot;,&quot;_2&quot;:0.5228973328794967},{&quot;_1&quot;:&quot;YearRemodAdd&quot;,&quot;_2&quot;:0.5071009671113866},{&quot;_1&quot;:&quot;BsmtFinSF1&quot;,&quot;_2&quot;:0.38641980624215344},{&quot;_1&quot;:&quot;BsmtFinSF2&quot;,&quot;_2&quot;:-0.01137812145021515},{&quot;_1&quot;:&quot;BsmtUnfSF&quot;,&quot;_2&quot;:0.21447910554696928},{&quot;_1&quot;:&quot;TotalBsmtSF&quot;,&quot;_2&quot;:0.6135805515591943},{&quot;_1&quot;:&quot;1stFlrSF&quot;,&quot;_2&quot;:0.6058521846919153},{&quot;_1&quot;:&quot;2ndFlrSF&quot;,&quot;_2&quot;:0.31933380283206736},{&quot;_1&quot;:&quot;LowQualFinSF&quot;,&quot;_2&quot;:-0.02560613000067955},{&quot;_1&quot;:&quot;GrLivArea&quot;,&quot;_2&quot;:0.7086244776126515},{&quot;_1&quot;:&quot;BsmtFullBath&quot;,&quot;_2&quot;:0.22712223313149427},{&quot;_1&quot;:&quot;BsmtHalfBath&quot;,&quot;_2&quot;:-0.016844154297358943},{&quot;_1&quot;:&quot;FullBath&quot;,&quot;_2&quot;:0.5606637627484453},{&quot;_1&quot;:&quot;HalfBath&quot;,&quot;_2&quot;:0.28410767559478256},{&quot;_1&quot;:&quot;BedroomAbvGr&quot;,&quot;_2&quot;:0.16821315430073963},{&quot;_1&quot;:&quot;KitchenAbvGr&quot;,&quot;_2&quot;:-0.13590737084214105},{&quot;_1&quot;:&quot;TotRmsAbvGrd&quot;,&quot;_2&quot;:0.5337231555820284},{&quot;_1&quot;:&quot;Fireplaces&quot;,&quot;_2&quot;:0.46692883675152763},{&quot;_1&quot;:&quot;GarageCars&quot;,&quot;_2&quot;:0.6404091972583519},{&quot;_1&quot;:&quot;GarageArea&quot;,&quot;_2&quot;:0.6234314389183622},{&quot;_1&quot;:&quot;WoodDeckSF&quot;,&quot;_2&quot;:0.32441344456812926},{&quot;_1&quot;:&quot;OpenPorchSF&quot;,&quot;_2&quot;:0.31585622711605504},{&quot;_1&quot;:&quot;EnclosedPorch&quot;,&quot;_2&quot;:-0.1285779579259566},{&quot;_1&quot;:&quot;3SsnPorch&quot;,&quot;_2&quot;:0.04458366533574838},{&quot;_1&quot;:&quot;ScreenPorch&quot;,&quot;_2&quot;:0.11144657114291112},{&quot;_1&quot;:&quot;PoolArea&quot;,&quot;_2&quot;:0.09240354949187318},{&quot;_1&quot;:&quot;MiscVal&quot;,&quot;_2&quot;:-0.021189579640303213},{&quot;_1&quot;:&quot;MoSold&quot;,&quot;_2&quot;:0.046432245223819446},{&quot;_1&quot;:&quot;YrSold&quot;,&quot;_2&quot;:-0.028922585168736813},{&quot;_1&quot;:&quot;SalePrice&quot;,&quot;_2&quot;:1.0}],&quot;genId&quot;:&quot;1994020087&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/pivotChart'], \n      function(playground, _magicpivotChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicpivotChart,\n    \"o\": {\"width\":600,\"height\":400,\"derivedAttributes\":{},\"extraOptions\":{}}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon9f4045943676bf0b071d2d53e360b667&quot;,&quot;initialValue&quot;:&quot;35&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonad79edde2d80c2213b76ade9ef90acd8&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div></div>\n      </div>\n    </div></div>"},"output_type":"execute_result","execution_count":93,"time":"Took: 2.699s, at 2019-04-07 08:21"}]},{"metadata":{"id":"2388923BADE3446FA8C9CDB70810E966"},"cell_type":"markdown","source":"## Data Transformations"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"F9BED6D4E5D34250BCF33F65C704D892"},"cell_type":"code","source":"import org.apache.spark.ml.linalg.Vectors\nimport spark.implicits._\nimport org.apache.spark.sql.types.{StructField, IntegerType, StringType}\nimport org.apache.spark.ml.feature.StringIndexer\n\nval labelField = \"SalePrice\"","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.ml.linalg.Vectors\nimport spark.implicits._\nimport org.apache.spark.sql.types.{StructField, IntegerType, StringType}\nimport org.apache.spark.ml.feature.StringIndexer\nlabelField: String = SalePrice\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":94,"time":"Took: 3.203s, at 2019-04-07 08:21"}]},{"metadata":{"id":"1BC51567D29348C08E9F20A70ACCACE0"},"cell_type":"markdown","source":"### Creating Scalar features vector"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"8C4315005A2D4CD48EE41C2FABFE70F8"},"cell_type":"code","source":"val scalarFields: Seq[String] = df.schema.fields.collect\n  { case StructField(name, IntegerType, _, _) if name != labelField && name != \"Id\" => name }\n\nval scalarData = df.map { row => (\n  Vectors.dense(scalarFields.map(name =>  row.getAs[Int](name).toDouble).toArray)\n  , row.getInt(row.fieldIndex(labelField))) }.toDF(\"features\", \"labels\")\n\nscalarData.show","outputs":[{"name":"stdout","output_type":"stream","text":"+--------------------+------+\n|            features|labels|\n+--------------------+------+\n|[60.0,8450.0,7.0,...|208500|\n|[20.0,9600.0,6.0,...|181500|\n|[60.0,11250.0,7.0...|223500|\n|[70.0,9550.0,7.0,...|140000|\n|[60.0,14260.0,8.0...|250000|\n|[50.0,14115.0,5.0...|143000|\n|[20.0,10084.0,8.0...|307000|\n|[60.0,10382.0,7.0...|200000|\n|[50.0,6120.0,7.0,...|129900|\n|[190.0,7420.0,5.0...|118000|\n|[20.0,11200.0,5.0...|129500|\n|[60.0,11924.0,9.0...|345000|\n|[20.0,12968.0,5.0...|144000|\n|[20.0,10652.0,7.0...|279500|\n|[20.0,10920.0,6.0...|157000|\n|[45.0,6120.0,7.0,...|132000|\n|[20.0,11241.0,6.0...|149000|\n|[90.0,10791.0,4.0...| 90000|\n|[20.0,13695.0,5.0...|159000|\n|[20.0,7560.0,5.0,...|139000|\n+--------------------+------+\nonly showing top 20 rows\n\nscalarFields: Seq[String] = ArraySeq(MSSubClass, LotArea, OverallQual, OverallCond, YearBuilt, YearRemodAdd, BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, 1stFlrSF, 2ndFlrSF, LowQualFinSF, GrLivArea, BsmtFullBath, BsmtHalfBath, FullBath, HalfBath, BedroomAbvGr, KitchenAbvGr, TotRmsAbvGrd, Fireplaces, GarageCars, GarageArea, WoodDeckSF, OpenPorchSF, EnclosedPorch, 3SsnPorch, ScreenPorch, PoolArea, MiscVal, MoSold, YrSold)\nscalarData: org.apache.spark.sql.DataFrame = [features: vector, labels: int]\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":95,"time":"Took: 2.867s, at 2019-04-07 08:21"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true,"id":"C45DEEEDEF1943C081060787B471F0CD"},"cell_type":"markdown","source":"## Feature Transformation\n\n### Categorical Features Encoding"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"86EA89433BC44416891717B296ECF5A4"},"cell_type":"code","source":"val stringFields: Seq[String] = df.schema.fields.collect { case StructField(name, StringType, _, _) => name }\n\nval dfWithCategories = stringFields.foldLeft(df) { (dfTemp, col) => \n  val indexer = new StringIndexer()\n    .setInputCol(col)\n    .setOutputCol(s\"${col}_id\")\n                                                  \n  indexer.fit(dfTemp).transform(dfTemp)\n}\n\ndfWithCategories.select(\"HouseStyle\", \"HouseStyle_id\").show","outputs":[{"name":"stdout","output_type":"stream","text":"+----------+-------------+\n|HouseStyle|HouseStyle_id|\n+----------+-------------+\n|    2Story|          1.0|\n|    1Story|          0.0|\n|    2Story|          1.0|\n|    2Story|          1.0|\n|    2Story|          1.0|\n|    1.5Fin|          2.0|\n|    1Story|          0.0|\n|    2Story|          1.0|\n|    1.5Fin|          2.0|\n|    1.5Unf|          5.0|\n|    1Story|          0.0|\n|    2Story|          1.0|\n|    1Story|          0.0|\n|    1Story|          0.0|\n|    1Story|          0.0|\n|    1.5Unf|          5.0|\n|    1Story|          0.0|\n|    1Story|          0.0|\n|    1Story|          0.0|\n|    1Story|          0.0|\n+----------+-------------+\nonly showing top 20 rows\n\nstringFields: Seq[String] = ArraySeq(MSZoning, LotFrontage, Street, Alley, LotShape, LandContour, Utilities, LotConfig, LandSlope, Neighborhood, Condition1, Condition2, BldgType, HouseStyle, RoofStyle, RoofMatl, Exterior1st, Exterior2nd, MasVnrType, MasVnrArea, ExterQual, ExterCond, Foundation, BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType2, Heating, HeatingQC, CentralAir, Electrical, KitchenQual, Functional, FireplaceQu, GarageType, GarageYrBlt, GarageFinish, GarageQual, GarageCond, PavedDrive, PoolQC, Fence, MiscFeature, SaleType, SaleCondition)\ndfWithCategories: org.apache.spark.sql.DataFrame = [Id: int, MSSubClass: int ... 125 more fields]\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":96,"time":"Took: 9.030s, at 2019-04-07 08:21"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"B607CCA49E8649418924D649BD6A39D7"},"cell_type":"code","source":"val data = dfWithCategories.map { row =>\n  (\n    Vectors.dense(scalarFields.map(name => row.getAs[Int](name).toDouble).toArray)\n  , Vectors.dense(stringFields.map(name => row.getAs[Double](s\"${name}_id\")).toArray)\n  , row.getInt(row.fieldIndex(labelField)))\n}.toDF(\"features_scalar\", \"features_categorical\", \"label\")\n\ndata.show","outputs":[{"name":"stdout","output_type":"stream","text":"+--------------------+--------------------+------+\n|     features_scalar|features_categorical| label|\n+--------------------+--------------------+------+\n|[60.0,8450.0,7.0,...|[0.0,6.0,0.0,0.0,...|208500|\n|[20.0,9600.0,6.0,...|[0.0,3.0,0.0,0.0,...|181500|\n|[60.0,11250.0,7.0...|[0.0,11.0,0.0,0.0...|223500|\n|[70.0,9550.0,7.0,...|[0.0,1.0,0.0,0.0,...|140000|\n|[60.0,14260.0,8.0...|[0.0,38.0,0.0,0.0...|250000|\n|[50.0,14115.0,5.0...|[0.0,7.0,0.0,0.0,...|143000|\n|[20.0,10084.0,8.0...|[0.0,5.0,0.0,0.0,...|307000|\n|[60.0,10382.0,7.0...|[0.0,0.0,0.0,0.0,...|200000|\n|[50.0,6120.0,7.0,...|[1.0,21.0,0.0,0.0...|129900|\n|[190.0,7420.0,5.0...|[0.0,4.0,0.0,0.0,...|118000|\n|[20.0,11200.0,5.0...|[0.0,2.0,0.0,0.0,...|129500|\n|[60.0,11924.0,9.0...|[0.0,7.0,0.0,0.0,...|345000|\n|[20.0,12968.0,5.0...|[0.0,0.0,0.0,0.0,...|144000|\n|[20.0,10652.0,7.0...|[0.0,61.0,0.0,0.0...|279500|\n|[20.0,10920.0,6.0...|[0.0,0.0,0.0,0.0,...|157000|\n|[45.0,6120.0,7.0,...|[1.0,21.0,0.0,0.0...|132000|\n|[20.0,11241.0,6.0...|[0.0,0.0,0.0,0.0,...|149000|\n|[90.0,10791.0,4.0...|[0.0,17.0,0.0,0.0...| 90000|\n|[20.0,13695.0,5.0...|[0.0,20.0,0.0,0.0...|159000|\n|[20.0,7560.0,5.0,...|[0.0,2.0,0.0,0.0,...|139000|\n+--------------------+--------------------+------+\nonly showing top 20 rows\n\ndata: org.apache.spark.sql.DataFrame = [features_scalar: vector, features_categorical: vector ... 1 more field]\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":97,"time":"Took: 2.980s, at 2019-04-07 08:21"}]},{"metadata":{"id":"9B30A4ABB9014ED998606F6FEE9EFA63"},"cell_type":"markdown","source":"## Scaling scalar features"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"864E934C24BC409B8BA9C7F6AE704F3B"},"cell_type":"code","source":"import org.apache.spark.ml.feature.StandardScaler\nimport org.apache.spark.ml.linalg.DenseVector\n\n// Transform Mean and Standard Deviation\nval scaler = new StandardScaler()\n  .setInputCol(\"features_scalar\")\n  .setOutputCol(\"features_scalar_scaled\")\n  .setWithStd(true)\n  .setWithMean(true)\n\n// Compute summary statistics by fitting the StandardScaler.\nval data_scaled = scaler.fit(data).transform(data)\ndata_scaled.show","outputs":[{"name":"stdout","output_type":"stream","text":"+--------------------+--------------------+------+----------------------+\n|     features_scalar|features_categorical| label|features_scalar_scaled|\n+--------------------+--------------------+------+----------------------+\n|[60.0,8450.0,7.0,...|[0.0,6.0,0.0,0.0,...|208500|  [0.07334983082099...|\n|[20.0,9600.0,6.0,...|[0.0,3.0,0.0,0.0,...|181500|  [-0.8722638821913...|\n|[60.0,11250.0,7.0...|[0.0,11.0,0.0,0.0...|223500|  [0.07334983082099...|\n|[70.0,9550.0,7.0,...|[0.0,1.0,0.0,0.0,...|140000|  [0.30975325907408...|\n|[60.0,14260.0,8.0...|[0.0,38.0,0.0,0.0...|250000|  [0.07334983082099...|\n|[50.0,14115.0,5.0...|[0.0,7.0,0.0,0.0,...|143000|  [-0.1630535974320...|\n|[20.0,10084.0,8.0...|[0.0,5.0,0.0,0.0,...|307000|  [-0.8722638821913...|\n|[60.0,10382.0,7.0...|[0.0,0.0,0.0,0.0,...|200000|  [0.07334983082099...|\n|[50.0,6120.0,7.0,...|[1.0,21.0,0.0,0.0...|129900|  [-0.1630535974320...|\n|[190.0,7420.0,5.0...|[0.0,4.0,0.0,0.0,...|118000|  [3.14659439811116...|\n|[20.0,11200.0,5.0...|[0.0,2.0,0.0,0.0,...|129500|  [-0.8722638821913...|\n|[60.0,11924.0,9.0...|[0.0,7.0,0.0,0.0,...|345000|  [0.07334983082099...|\n|[20.0,12968.0,5.0...|[0.0,0.0,0.0,0.0,...|144000|  [-0.8722638821913...|\n|[20.0,10652.0,7.0...|[0.0,61.0,0.0,0.0...|279500|  [-0.8722638821913...|\n|[20.0,10920.0,6.0...|[0.0,0.0,0.0,0.0,...|157000|  [-0.8722638821913...|\n|[45.0,6120.0,7.0,...|[1.0,21.0,0.0,0.0...|132000|  [-0.2812553115586...|\n|[20.0,11241.0,6.0...|[0.0,0.0,0.0,0.0,...|149000|  [-0.8722638821913...|\n|[90.0,10791.0,4.0...|[0.0,17.0,0.0,0.0...| 90000|  [0.78256011558026...|\n|[20.0,13695.0,5.0...|[0.0,20.0,0.0,0.0...|159000|  [-0.8722638821913...|\n|[20.0,7560.0,5.0,...|[0.0,2.0,0.0,0.0,...|139000|  [-0.8722638821913...|\n+--------------------+--------------------+------+----------------------+\nonly showing top 20 rows\n\nimport org.apache.spark.ml.feature.StandardScaler\nimport org.apache.spark.ml.linalg.DenseVector\nscaler: org.apache.spark.ml.feature.StandardScaler = stdScal_d2fb32e88c3d\ndata_scaled: org.apache.spark.sql.DataFrame = [features_scalar: vector, features_categorical: vector ... 2 more fields]\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":98,"time":"Took: 3.152s, at 2019-04-07 08:22"}]},{"metadata":{"id":"24D673BE498B450C88EDC68EBCE7D236"},"cell_type":"markdown","source":"## Combining Data"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"7C909B79640744EEAE3C964A8A6CCDC3"},"cell_type":"code","source":"val dataReady = data_scaled.map { row => \n    val combinedFeatures = Vectors.dense(row.getAs[DenseVector](\"features_scalar_scaled\").values ++\n                                         row.getAs[DenseVector](\"features_categorical\" ).values)\n     (combinedFeatures, row.getAs[Int](\"label\"))                                \n}.toDF(\"features\", \"label\")\ndataReady.show","outputs":[{"name":"stdout","output_type":"stream","text":"+--------------------+------+\n|            features| label|\n+--------------------+------+\n|[0.07334983082099...|208500|\n|[-0.8722638821913...|181500|\n|[0.07334983082099...|223500|\n|[0.30975325907408...|140000|\n|[0.07334983082099...|250000|\n|[-0.1630535974320...|143000|\n|[-0.8722638821913...|307000|\n|[0.07334983082099...|200000|\n|[-0.1630535974320...|129900|\n|[3.14659439811116...|118000|\n|[-0.8722638821913...|129500|\n|[0.07334983082099...|345000|\n|[-0.8722638821913...|144000|\n|[-0.8722638821913...|279500|\n|[-0.8722638821913...|157000|\n|[-0.2812553115586...|132000|\n|[-0.8722638821913...|149000|\n|[0.78256011558026...| 90000|\n|[-0.8722638821913...|159000|\n|[-0.8722638821913...|139000|\n+--------------------+------+\nonly showing top 20 rows\n\ndataReady: org.apache.spark.sql.DataFrame = [features: vector, label: int]\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":99,"time":"Took: 3.356s, at 2019-04-07 08:22"}]},{"metadata":{"id":"FEA1C4AB0A3B458E864B9A990146D74F"},"cell_type":"markdown","source":"# Feature Selectors\n\n## Filtering out sample ID"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"0DD4BA1711FE407FB432B14E4CE0AF8E"},"cell_type":"code","source":"import org.apache.spark.ml.feature.VectorSlicer\n\nval scalarFields: Seq[String] = df.schema.fields.collect { case StructField(name, IntegerType, _, _) if name != labelField => name }\n\nval scalarData = df.map {row => (\n  Vectors.dense(scalarFields.map(name => row.getAs[Int](name).toDouble).toArray)\n  , row.getInt(row.fieldIndex(labelField))) }.toDF(\"scalar_features\", \"label\")\n\nval slicer = new VectorSlicer()\n  .setInputCol(\"scalar_features\")\n  .setOutputCol(\"features\")\n  .setIndices((1 until scalarFields.size).toArray)\n\nval output = slicer.transform(scalarData)\noutput.show()","outputs":[{"name":"stdout","output_type":"stream","text":"+--------------------+------+--------------------+\n|     scalar_features| label|            features|\n+--------------------+------+--------------------+\n|[1.0,60.0,8450.0,...|208500|[60.0,8450.0,7.0,...|\n|[2.0,20.0,9600.0,...|181500|[20.0,9600.0,6.0,...|\n|[3.0,60.0,11250.0...|223500|[60.0,11250.0,7.0...|\n|[4.0,70.0,9550.0,...|140000|[70.0,9550.0,7.0,...|\n|[5.0,60.0,14260.0...|250000|[60.0,14260.0,8.0...|\n|[6.0,50.0,14115.0...|143000|[50.0,14115.0,5.0...|\n|[7.0,20.0,10084.0...|307000|[20.0,10084.0,8.0...|\n|[8.0,60.0,10382.0...|200000|[60.0,10382.0,7.0...|\n|[9.0,50.0,6120.0,...|129900|[50.0,6120.0,7.0,...|\n|[10.0,190.0,7420....|118000|[190.0,7420.0,5.0...|\n|[11.0,20.0,11200....|129500|[20.0,11200.0,5.0...|\n|[12.0,60.0,11924....|345000|[60.0,11924.0,9.0...|\n|[13.0,20.0,12968....|144000|[20.0,12968.0,5.0...|\n|[14.0,20.0,10652....|279500|[20.0,10652.0,7.0...|\n|[15.0,20.0,10920....|157000|[20.0,10920.0,6.0...|\n|[16.0,45.0,6120.0...|132000|[45.0,6120.0,7.0,...|\n|[17.0,20.0,11241....|149000|[20.0,11241.0,6.0...|\n|[18.0,90.0,10791....| 90000|[90.0,10791.0,4.0...|\n|[19.0,20.0,13695....|159000|[20.0,13695.0,5.0...|\n|[20.0,20.0,7560.0...|139000|[20.0,7560.0,5.0,...|\n+--------------------+------+--------------------+\nonly showing top 20 rows\n\nimport org.apache.spark.ml.feature.VectorSlicer\nscalarFields: Seq[String] = ArraySeq(Id, MSSubClass, LotArea, OverallQual, OverallCond, YearBuilt, YearRemodAdd, BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, 1stFlrSF, 2ndFlrSF, LowQualFinSF, GrLivArea, BsmtFullBath, BsmtHalfBath, FullBath, HalfBath, BedroomAbvGr, KitchenAbvGr, TotRmsAbvGrd, Fireplaces, GarageCars, GarageArea, WoodDeckSF, OpenPorchSF, EnclosedPorch, 3SsnPorch, ScreenPorch, PoolArea, MiscVal, MoSold, YrSold)\nscalarData: org.apache.spark.sql.DataFrame = [scalar_features: vector, label: int]\nslicer: org.apache.spark.ml.feature.VectorSlicer = vectorSlicer_3f46669b0af6\noutput: org.apache.spark.sql.DataFrame = [scalar_features: vector, label: int ... 1 more field]\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":107,"time":"Took: 2.633s, at 2019-04-07 08:24"}]},{"metadata":{"id":"DD695357C53B42738F9C2E3C41622B8B"},"cell_type":"markdown","source":"# Modeling\n\n##Common Logic"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"071DE13FEE8542A98AFAB355DDE78D29"},"cell_type":"code","source":"val Array(trainData, testData) = output.randomSplit(Array(0.7, 0.3))\n\ndef evaluate(ds: DataFrame, model: Transformer): (DataFrame, Double) = {\n  val evaluator = new RegressionEvaluator()\n   .setLabelCol(\"label\")\n   .setPredictionCol(\"prediction\")\n   .setMetricName(\"r2\")\n  val predictions = model.transform(ds)\n  val r2 = evaluator.evaluate(predictions)\n  (predictions, r2)\n}\n// \n\ntrainData.show(10)","outputs":[{"name":"stdout","output_type":"stream","text":"+--------------------+------+--------------------+\n|     scalar_features| label|            features|\n+--------------------+------+--------------------+\n|[1.0,60.0,8450.0,...|208500|[60.0,8450.0,7.0,...|\n|[2.0,20.0,9600.0,...|181500|[20.0,9600.0,6.0,...|\n|[3.0,60.0,11250.0...|223500|[60.0,11250.0,7.0...|\n|[4.0,70.0,9550.0,...|140000|[70.0,9550.0,7.0,...|\n|[5.0,60.0,14260.0...|250000|[60.0,14260.0,8.0...|\n|[6.0,50.0,14115.0...|143000|[50.0,14115.0,5.0...|\n|[8.0,60.0,10382.0...|200000|[60.0,10382.0,7.0...|\n|[9.0,50.0,6120.0,...|129900|[50.0,6120.0,7.0,...|\n|[10.0,190.0,7420....|118000|[190.0,7420.0,5.0...|\n|[11.0,20.0,11200....|129500|[20.0,11200.0,5.0...|\n+--------------------+------+--------------------+\nonly showing top 10 rows\n\ntrainData: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [scalar_features: vector, label: int ... 1 more field]\ntestData: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [scalar_features: vector, label: int ... 1 more field]\nevaluate: (ds: org.apache.spark.sql.DataFrame, model: org.apache.spark.ml.Transformer)(org.apache.spark.sql.DataFrame, Double)\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":108,"time":"Took: 2.568s, at 2019-04-07 08:25"}]},{"metadata":{"id":"1FD7647C253149BC87B80BEC0D9A5B50"},"cell_type":"markdown","source":"## Linear Regression"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"CC282773540341F482EBED3DE63572A2"},"cell_type":"code","source":"val lr = new LinearRegression()\n  .setMaxIter(1000)\n  .setRegParam(0.3)\n\n//Fit the model \nval lrModel = lr.fit(trainData)\n\n//Evaluation \nval (trainLrPredictions, trainLrR2) = evaluate(trainData, lrModel)\nval (testLrPredictions, testLrR2) = evaluate(testData, lrModel)\n\n// Output \n\nprintln(s\"r2 on train data: $trainLrR2\")\nprintln(s\"r2 on test data: $testLrR2\")\n\ntestLrPredictions.select($\"prediction\", $\"label\").show(10)","outputs":[{"name":"stdout","output_type":"stream","text":"r2 on train data: 0.8483071444636849\nr2 on test data: 0.714025712590983\n+------------------+------+\n|        prediction| label|\n+------------------+------+\n| 281038.7226389352|307000|\n|    148092.5826044|132000|\n|166972.25290208473|149000|\n|146539.95084138343|129900|\n|142832.80039131735|154000|\n|120649.99462193949|134800|\n| 163952.9360057352|160000|\n|123053.38960780168|141000|\n|276951.58054185077|319900|\n| 297636.8508573427|239686|\n+------------------+------+\nonly showing top 10 rows\n\nlr: org.apache.spark.ml.regression.LinearRegression = linReg_6dccd1ba0fea\nlrModel: org.apache.spark.ml.regression.LinearRegressionModel = linReg_6dccd1ba0fea\ntrainLrPredictions: org.apache.spark.sql.DataFrame = [scalar_features: vector, label: int ... 2 more fields]\ntrainLrR2: Double = 0.8483071444636849\ntestLrPredictions: org.apache.spark.sql.DataFrame = [scalar_features: vector, label: int ... 2 more fields]\ntestLrR2: Double = 0.714025712590983\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":109,"time":"Took: 4.045s, at 2019-04-07 08:25"}]},{"metadata":{"id":"19262DB0B5844A1C8F6A13B9616EFF9B"},"cell_type":"markdown","source":"## Regression Tree"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"C874F09020A84BB49316C5C7ADB7D632"},"cell_type":"code","source":"val dt = new DecisionTreeRegressor()\n  .setLabelCol(\"label\")\n  .setFeaturesCol(\"features\")\n  .setMaxBins(1000)\n  .setMaxDepth(10)\n\n// Fit the model\nval dtModel = dt.fit(trainData)\n\n//Evaluation \nval (trainDtPredictions, trainDtR2) = evaluate(trainData, dtModel)\nval (testDtPredictions, testDtR2) = evaluate(testData, dtModel)\n\n// Output \n\nprintln(s\"r2 on train data: $trainDtR2\")\nprintln(s\"r2 on test data: $testDtR2\")\n\ntestLrPredictions.select($\"prediction\", $\"label\").show(10)","outputs":[{"name":"stdout","output_type":"stream","text":"r2 on train data: 0.9881832743799838\nr2 on test data: 0.7643410466776264\n+------------------+------+\n|        prediction| label|\n+------------------+------+\n| 281038.7226389352|307000|\n|    148092.5826044|132000|\n|166972.25290208473|149000|\n|146539.95084138343|129900|\n|142832.80039131735|154000|\n|120649.99462193949|134800|\n| 163952.9360057352|160000|\n|123053.38960780168|141000|\n|276951.58054185077|319900|\n| 297636.8508573427|239686|\n+------------------+------+\nonly showing top 10 rows\n\ndt: org.apache.spark.ml.regression.DecisionTreeRegressor = dtr_7328503213e6\ndtModel: org.apache.spark.ml.regression.DecisionTreeRegressionModel = DecisionTreeRegressionModel (uid=dtr_7328503213e6) of depth 10 with 763 nodes\ntrainDtPredictions: org.apache.spark.sql.DataFrame = [scalar_features: vector, label: int ... 2 more fields]\ntrainDtR2: Double = 0.9881832743799838\ntestDtPredictions: org.apache.spark.sql.DataFrame = [scalar_features: vector, label: int ... 2 more fields]\ntestDtR2: Double = 0.7643410466776264\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":113,"time":"Took: 5.479s, at 2019-04-07 08:36"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true,"id":"EE0FF692FB7A471285EB789655B755ED"},"cell_type":"code","source":"","outputs":[]}],"nbformat":4}